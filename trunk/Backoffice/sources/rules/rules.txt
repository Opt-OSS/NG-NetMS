# Copyrights: Opt/Net
# Date: May 3 2015
# Author: T. Matselyukh
#------------------------------------------------------------------------------
#--------------------------- START OF STANDARD RULES --------------------------
# IMPORTANT NOTES:
# ===============
# 1. All directory locations are relative from $NGNMS_HOME environment variable
# Do not prepend $NGNMS_HOME in front of the file locations, this is assumed
# automatically by collectors.
# 2. All command line arguments are always passed to the scripts. Do not add
# the command line arguments or your rules will not work.
#
# FORMAT of action script invocation:
#
#  action "bin/script.sh";
#
# implicit command line arguments will be appended in the following order:
#
#      $severity $priority $timestamp $origin $facility $code $msg
#
# you may use them in your scripts through the argument line variables.
#
#------------------------------------------------------------------------------

# set light severity for the login events and execute small notification script
event LOGIN {
      condition $facility ~= "mgd" &&
      $msg ~= "UI_LOGIN_EVENT: User";
      protocol syslog;
      severity 1;
      action "triggers/trigger.sh";
}

# set power issues severity to high
event POWER {
      condition $msg ~="Power";
      severity 100;
}

# set VERY high severity for any Alarm SET events
event ALARM {
      condition $facility ~= "alarmd" &&
      ( $msg ~= "Alarm set" || $msg ~= "ALARM SET" );
      severity 666;
      action "triggers/bell.sh";
}

#start poll cycle for juniper on configuration change
event COMMIT_JNP {
      condition $msg ~= "Commit operation in progress: commit complete";
      protocol syslog;
      severity 100;
      action "triggers/poll_host_tr.sh";
}

#start poll cycle for cisco on configuration change
event COMMIT_CSC {
      condition $msg ~= "Configured from";
      protocol syslog;
      severity 100;
      action "triggers/poll_host_tr.sh";
}

#start poll cycle for juniper SSG on configuration change
event COMMIT_JNP_SSG {
      condition $msg ~= "System configuration saved by";
      protocol syslog;
      severity 100;
      action "triggers/poll_host_tr.sh";
}

event LOW_SNMP {
      condition $facility ~= "^snmpd.*";
      protocol syslog;
severity 2;
}

event LOW_NTP {
      condition $facility ~= "^xntpd.*";
      protocol syslog;
severity 1;
}

event LOW_MGD {
      condition $facility ~= "^mgd.*";
      protocol syslog;
severity 1;
}

event ERROR {
      condition $msg ~= ".*error.*";
      severity 500;
}

event FAILED {
      condition $msg ~= ".*failed.*";
      severity 500;
}

event FAILURE {
      condition $msg ~= ".*failure.*";
      severity 500;
}

event FAILED_PW {
      condition $msg ~= ".*Failed password.*";
      protocol syslog;
severity 50;
}

event FAILED_PW_2MANY {
      condition $msg ~= ".*too many password failures.*";
      protocol syslog;
severity 250;
}

event DENY {
      condition $msg ~= ".*DENY.*";
      severity 50;
}

#---------------------------DEMO-EXAMPLES--DELETE BELOW THIS LINE--------------
# simple demo examples for rules file parser

# ignore all local events
#event FREEB {
#      condition $origin ~="localhost";
#      discard;
#      protocol syslog;
#}

# this is a test for all parameters - example only
event EARTH_LOGIN {
      condition $origin ~= "earth" &&
        $facility ~= "login:" &&
        $timestamp ~= "Mar 10.*" &&
        $code ~= "login" &&
        $msg ~= "from 172.26.27.2 .*";
#      discard;
      severity 1;
}

# another test - this one shall not fire as protocol is syslog
event sysUpTime {
      condition $msg ~= ".*sysUpTime.*";
      protocol syslog;
      discard;
}

# another test term for SNMP traps processing
event SNMP {
      condition $origin ~= "192\.168\.3\.1";
#     condition $msg ~= ".*sysUpTime.*";
      protocol snmp;
      discard;
      action "triggers/trigger.sh";
}
#------------------------------------------------------------
